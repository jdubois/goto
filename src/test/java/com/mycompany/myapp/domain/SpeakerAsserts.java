package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SpeakerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeakerAllPropertiesEquals(Speaker expected, Speaker actual) {
        assertSpeakerAutoGeneratedPropertiesEquals(expected, actual);
        assertSpeakerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeakerAllUpdatablePropertiesEquals(Speaker expected, Speaker actual) {
        assertSpeakerUpdatableFieldsEquals(expected, actual);
        assertSpeakerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeakerAutoGeneratedPropertiesEquals(Speaker expected, Speaker actual) {
        assertThat(expected)
            .as("Verify Speaker auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeakerUpdatableFieldsEquals(Speaker expected, Speaker actual) {
        assertThat(expected)
            .as("Verify Speaker relevant properties")
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeakerUpdatableRelationshipsEquals(Speaker expected, Speaker actual) {
        assertThat(expected)
            .as("Verify Speaker relationships")
            .satisfies(e -> assertThat(e.getConferences()).as("check conferences").isEqualTo(actual.getConferences()));
    }
}
